# Node კლასის შექმნა, რომელიც წარმოადგენს სტეკის ერთეულს (კვანძს)
class Node:
    def __init__(self, data=None):
        self.data = data  # კვანძის მონაცემთა ველი, რომელიც შეიცავს მნიშვნელობას
        self.next = None  # მიანიშნებს სტეკის შემდეგ ელემენტზე (კვანძზე), რომელიც სტეკის ზედა ელემენტია


# Stack (სტეკი) კლასის შექმნა
class Stack:
    def __init__(self):
        self.top_node = None  # სტეკის ზედა ელემენტის მისამართი (თავდაპირველად ცარიელი)
        self.length = 0  # სტეკში არსებული ელემენტების რაოდენობა

    # მეთოდი, რომელიც ამოწმებს არის თუ არა სტეკი ცარიელი
    def empty(self):
        return self.length == 0  # აბრუნებს True-ს, თუ სტეკი ცარიელია, False-ს სხვა შემთხვევაში

    # მეთოდი, რომელიც აბრუნებს სტეკში არსებული ელემენტების რაოდენობას
    def size(self):
        return self.length

    # მეთოდი, რომელიც სტეკში ახალი მონაცემს (data) უმატებს
    def push(self, data):
        new_node = Node(data)  # ახალი კვანძის შექმნა გადაცემული მონაცემით
        new_node.next = self.top_node  # ახალ კვანძს მივუთითებთ სტეკის ზედა ელემენტს, რომელიც ამჟამინდელი top_node-ა
        self.top_node = new_node  # ახალი კვანძი ხდება სტეკის ზედა ელემენტი
        self.length += 1  # სტეკის სიგრძე იზრდება

    # მეთოდი, რომელიც შლის სტეკის ზედა ელემენტს და აბრუნებს მის მნიშვნელობას
    def pop(self):
        if not self.empty():  # თუ სტეკი ცარიელი არ არის
            popped_item = self.top_node.data  # ვიღებთ სტეკის ზედა ელემენტის მონაცემს
            self.top_node = self.top_node.next  # სტეკის ზედა ელემენტი ხდება შემდეგი ელემენტი
            self.length -= 1  # სტეკის სიგრძე მცირდება
            return popped_item  # აბრუნებს წაშლილი ელემენტის მონაცემს
        else:
            raise IndexError('Stack is empty')  # თუ სტეკი ცარიელია, აგდებს შეცდომას


# სტეკის ობიექტის შექმნა
stack = Stack()

# სტეკში მონაცემების დამატება
stack.push(10)
stack.push(11)
stack.push(12)
stack.push(13)

# სტეკიდან ელემენტების წაშლა და მათი მნიშვნელობების ეკრანზე გამოტანა
print(stack.pop())  # ამოიღებს და დაბეჭდავს 13-ს
print(stack.pop())  # ამოიღებს და დაბეჭდავს 12-ს
print(stack.pop())  # ამოიღებს და დაბეჭდავს 11-ს
print(stack.pop())  # ამოიღებს და დაბეჭდავს 10-ს
print(stack.pop())  # სტეკი ცარიელია, ამიტომ გამოიტანს შეცდომას: 'Stack is empty'
